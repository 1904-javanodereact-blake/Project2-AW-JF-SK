{"ast":null,"code":"import _objectSpread from \"C:\\\\2019classrevature\\\\project1-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\2019classrevature\\\\project1-app\\\\src\\\\components\\\\Reimbursements\\\\userupdate.component.tsx\";\nimport React from 'react';\nimport { number, string } from 'prop-types';\nexport class UserUpdateComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submit = async event => {\n      event.preventDefault();\n      console.log('attempting to login');\n      let user = {\n        user_id: number,\n        user_name: string,\n        password: string,\n        firstname: string,\n        lastname: string,\n        email: string,\n        user_role: undefined\n      };\n\n      try {\n        const resp = await fetch('http://localhost:8081/users/', {\n          method: 'PATCH',\n          credentials: 'include',\n          body: JSON.stringify(user),\n          headers: {\n            'content-type': 'application/json'\n          }\n        });\n        console.log(resp);\n\n        if (resp.status === 401) {\n          this.setState({\n            errorMessage: 'Invalid Credentials'\n          });\n        } else if (resp.status === 200) {\n          // redirect to spaceships page\n          // const user = await resp.json();\n          this.props.history.push('/home');\n        } else {\n          this.setState({\n            errorMessage: 'Cannot Update User'\n          });\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.updateUserId = event => {\n      this.setState({\n        user: _objectSpread({}, this.state.user, {\n          userId: event.target.value\n        })\n      });\n    };\n\n    this.updateUsername = event => {\n      this.setState({\n        user: _objectSpread({}, this.state.user, {\n          username: event.target.value\n        })\n      });\n    };\n\n    this.updatePassword = event => {\n      this.setState({\n        user: _objectSpread({}, this.state.user, {\n          password: event.target.value\n        })\n      });\n    };\n\n    this.updateFirstName = event => {\n      this.setState({\n        user: _objectSpread({}, this.state.user, {\n          firstName: event.target.value\n        })\n      });\n    };\n\n    this.updateLastName = event => {\n      this.setState({\n        user: _objectSpread({}, this.state.user, {\n          lastName: event.target.value\n        })\n      });\n    };\n\n    this.updateEmail = event => {\n      this.setState({\n        user: _objectSpread({}, this.state.user, {\n          email: event.target.value\n        })\n      });\n    };\n\n    this.updateRoleId = event => {\n      this.setState({\n        user: _objectSpread({}, this.state.user, {\n          roleId: event.target.value\n        })\n      });\n    };\n\n    this.updateRole = event => {\n      this.setState({\n        user: _objectSpread({}, this.state.user, {\n          role: event.target.value\n        })\n      });\n    };\n\n    this.state = {\n      user: undefined,\n      input: '',\n      errorMessage: ''\n    };\n  }\n\n  updateInput(e) {\n    this.setState({\n      input: e.target.value\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          username = _this$state.username,\n          password = _this$state.password,\n          errorMessage = _this$state.errorMessage;\n    return React.createElement(\"form\", {\n      className: \"form-signin\",\n      onSubmit: this.submit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"h3 mb-3 font-weight-normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Please sign in\"), React.createElement(\"label\", {\n      htmlFor: \"inputUsername\",\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Username\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"inputUsername\",\n      name: \"username\",\n      className: \"form-control\",\n      placeholder: \"Username\",\n      required: true,\n      value: username,\n      onChange: this.updateUsername,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"inputPassword\",\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Password\"), React.createElement(\"input\", {\n      type: \"password\",\n      id: \"inputPassword\",\n      name: \"password\",\n      className: \"form-control\",\n      placeholder: \"Password\",\n      required: true,\n      value: password,\n      onChange: this.updatePassword,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-lg btn-primary btn-block\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Sign in\"), React.createElement(\"p\", {\n      id: \"login-error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, errorMessage));\n  }\n\n}","map":{"version":3,"sources":["C:\\2019classrevature\\project1-app\\src\\components\\Reimbursements\\userupdate.component.tsx"],"names":["React","number","string","UserUpdateComponent","Component","constructor","props","submit","event","preventDefault","console","log","user","user_id","user_name","password","firstname","lastname","email","user_role","undefined","resp","fetch","method","credentials","body","JSON","stringify","headers","status","setState","errorMessage","history","push","err","updateUserId","state","userId","target","value","updateUsername","username","updatePassword","updateFirstName","firstName","updateLastName","lastName","updateEmail","updateRoleId","roleId","updateRole","role","input","updateInput","e","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { number, string } from 'prop-types';\r\nimport { User } from '../../model/user';\r\n\r\n\r\ninterface IUserUpdateState {\r\n    user: User;\r\n    input: string;\r\n    errorMessage: string;\r\n}\r\n\r\nexport class UserUpdateComponent extends React.Component<any, IUserUpdateState> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: undefined,\r\n            input: '',\r\n            errorMessage: ''\r\n        };\r\n    }\r\n\r\n    submit = async (event) => {\r\n        event.preventDefault();\r\n        console.log('attempting to login');\r\n        let user = {\r\n            user_id: number,\r\n            user_name: string,\r\n            password: string,\r\n            firstname: string,\r\n            lastname: string,\r\n            email: string,\r\n            user_role: undefined\r\n        };\r\n\r\n        try {\r\n            const resp = await fetch('http://localhost:8081/users/', {\r\n                method: 'PATCH',\r\n                credentials: 'include',\r\n                body: JSON.stringify(user),\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                }\r\n            })\r\n            console.log(resp);\r\n\r\n            if (resp.status === 401) {\r\n                this.setState({\r\n                    errorMessage: 'Invalid Credentials'\r\n                });\r\n            } else if (resp.status === 200) {\r\n                // redirect to spaceships page\r\n                // const user = await resp.json();\r\n                this.props.history.push('/home');\r\n            } else {\r\n                this.setState({\r\n                    errorMessage: 'Cannot Update User'\r\n                });\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n    updateInput(e) {\r\n        this.setState(\r\n            {\r\n                input: e.target.value\r\n            }\r\n        )\r\n    }\r\n    updateUserId = (event) => {\r\n        this.setState({\r\n            user: {\r\n                ...this.state.user,\r\n                userId: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    updateUsername = (event) => {\r\n        this.setState({\r\n            user: {\r\n                ...this.state.user,\r\n                username: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    updatePassword = (event) => {\r\n        this.setState({\r\n            user: {\r\n                ...this.state.user,\r\n                password: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    updateFirstName = (event) => {\r\n        this.setState({\r\n            user: {\r\n                ...this.state.user,\r\n                firstName: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    updateLastName = (event) => {\r\n        this.setState({\r\n            user: {\r\n                ...this.state.user,\r\n                lastName: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    updateEmail = (event) => {\r\n        this.setState({\r\n            user: {\r\n                ...this.state.user,\r\n                email: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    updateRoleId = (event) => {\r\n        this.setState({\r\n            user: {\r\n                ...this.state.user,\r\n                roleId: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    updateRole = (event) => {\r\n        this.setState({\r\n            user: {\r\n                ...this.state.user,\r\n                role: event.target.value\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        const { username, password, errorMessage } = this.state;\r\n        return (\r\n\r\n            <form className=\"form-signin\" onSubmit={this.submit}>\r\n                <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\r\n                <label htmlFor=\"inputUsername\" className=\"sr-only\">Username</label>\r\n                <input type=\"text\" id=\"inputUsername\" name=\"username\"\r\n                    className=\"form-control\" placeholder=\"Username\"\r\n                    required value={username} onChange={this.updateUsername} />\r\n\r\n                <label htmlFor=\"inputPassword\" className=\"sr-only\">Password</label>\r\n                <input type=\"password\" id=\"inputPassword\" name=\"password\"\r\n                    className=\"form-control\" placeholder=\"Password\"\r\n                    required value={password} onChange={this.updatePassword} />\r\n\r\n                <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Sign in</button>\r\n                <p id=\"login-error\">{errorMessage}</p>\r\n            </form>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}